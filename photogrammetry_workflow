#Workflow to take single context point clouds and create volumetric entities
# last updated 08/08/2017
# By chambbj <real name?> and Gary Nobles
#
# once docker is set up get PDAL
# you will have to enable hyper-v in the windows bios to install docker

docker pull chambbj/pdal-noble-kernel

# access BASH to install jq
# what is jq?
docker run -it chambbj/pdal-noble-kernel /bin/bash

apt-get update
apt-get install -y --fix-missing --no-install-recommends jq
exit

docker ps -a
# from this you can get the <name>
# docker commit <name> chambbj/pdal-noble-kernel-with-jq

# pointcloud list:
201406151141.las
201407031017.las
201407060711.las
201407061221.las
201407071201.las

docker commit determined_rosalind chambbj/pdal-noble-kernel-with-jq
docker commit kind_brattain chambbj/pdal-noble-kernel-with-jq

# clip the point clouds based on the extent of the other point cloud
# this removes 'outliers' or edge effects which are irrelevent to our context
# has to be run for each point cloud


#does power shell allow for variables
$dir = "C:\Users\MAKuser\point_clouds"



# point cloud 201406151141.las

docker run -it --rm -v /c/Users/MAKuser/point_clouds:/opt/data/F80 chambbj/pdal-noble-kernel-with-jq bash -c \
    "pdal info /opt/data/F80/201406151141.las --boundary | jq .boundary.boundary \
    | xargs -I {} pdal translate /opt/data/201407031017.las /opt/data/F80/clipped_1.las crop \
        --filters.crop.polygon={}”

# point cloud 2.las

docker run -i --rm -v /p/KAP/:/opt/data chambbj/pdal-noble-kernel-with-jq bash -c \
    "pdal info /opt/data/.las --boundary | jq .boundary.boundary \
    | xargs -I {} pdal translate /opt/data/1.las /opt/data/clipped_2.las crop \
        --filters.crop.polygon={}”
        
# outputs are clipped_1.las and clipped_2.las

# the above ran but no resulting files ...




# remaining workflow

# save to database
Save cleaned pointclouds to postgres (before merging), install the pg extension
actually save the pointclouds at every stage of processing to get them in the database and out of the txt files!
in future export from photoscan as .las
how to access directly from a postgres db? (a future wish, not useful yet)

CREATE EXTENSION pointcloud;
CREATE EXTENSION postgis;
CREATE EXTENSION pointcloud_postgis;




# clean resulting point cloud of any 'accidentatal' points 
Volume pointcloud will probably have some noise, would a k-means clustering help identify the smaller clusters? 
But since you specify the no. of clusters for k-means perhaps a heirachical clustering like wards case would be better?
Or is there a relevent noise filter?
Would classifications be of use? e.g. somehow classify the 'pointcloud volume' then delete the rest of the points?

# cloud compare
Normally the bottom point clouds has its normals inverted before a volume is created
Volumes are created using poisson


# Gary's notes - will be tied when finished


# create a bounding polygon1 for pointcloud1
docker run -it --rm -v /p/KAP:/opt/data chambbj/pdal-noble-kernel pdal info opt/data/1.las --boundary

#pipeline
#https://www.pdal.io/tutorial/clipping-with-shapefile.html





 {
    "pipeline": [
        "p:/KAP/1.laz",
        {
            "column": "CLS",
            "datasource": "c:/Users/hobu/PDAL/exercises/analysis/clipping/attributes.vrt",
            "dimension": "Classification",
            "layer": "OGRGeoJSON",
            "type": "filters.overlay"
        },
        {
            "limits": "Classification[6:6]",
            "type": "filters.range"
        },
        "c:/Users/hobu/PDAL/exercises/analysis/clipping/stadium.las"
    ]
}
   



# clip pointcloud2 by polygon1

# repeat clipping for pointcloud1


#docker run -it --rm -v /p/KAP:/opt/data chambbj/pdal-noble-kernel pdal noble /opt/data/1.las /opt/data/2.las /opt/data/out1_2_1cm.las 0.01



#run the PDAL-noble-kernel
docker run -it --rm -v /p/KAP:/opt/data chambbj/pdal-noble-kernel pdal noble /opt/data/1.las /opt/data/2.las /opt/data/out1_2_1cm.las 0.01



docker run -it --rm -v /path/to/local/data:/opt/data chambbj/pdal-noble-kernel pdal noble /opt/data/layerA /opt/data/layerB /opt/data/output <tolerance>
# to see 
docker run -it --rm chambbj/pdal-noble-kernel pdal noble --help
